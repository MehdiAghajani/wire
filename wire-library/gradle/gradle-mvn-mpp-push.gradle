apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.jfrog.artifactory'

dokka {
  outputDirectory = "$rootDir/docs/3.x"
  outputFormat = 'gfm'
  reportUndocumented = false
  skipDeprecated = true
  jdkVersion = 8

  // This will force platform tags for all non-common sources e.g. "JVM"
  impliedPlatforms = ["Common"]

  kotlinTasks {
    // dokka fails to retrieve sources from MPP-tasks so they must be set empty to avoid exception
    // use sourceRoot instead (see below)
    []
  }
  packageOptions {
    prefix = "com.squareup.wire.internal"
    suppress = true
  }
  sourceRoot {
    // assuming there is only a single source dir...
    path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
    platforms = ["Common"]
  }
  if (kotlin.sourceSets.getNames().contains("jvmMain")) {
    sourceRoot {
      // assuming there is only a single source dir...
      path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
      platforms = ["JVM"]
    }
  }
  if (kotlin.sourceSets.getNames().contains("jsMain")) {
    sourceRoot {
      // assuming there is only a single source dir...
      path = kotlin.sourceSets.jsMain.kotlin.srcDirs[0]
      platforms = ["js"]
    }
  }
  if (kotlin.sourceSets.getNames().contains("nativeMain")) {
    sourceRoot {
      // assuming there is only a single source dir...
      path = kotlin.sourceSets.nativeMain.kotlin.srcDirs[0]
      platforms = ["native"]
    }
  }
}

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
          "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
          "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

task emptySourcesJar(type: Jar) {
  classifier = 'sources'
}

task javadocsJar(type: Jar, dependsOn: dokka) {
  classifier = 'javadoc'
  from dokka.outputDirectory
}

signing {
  required { false }
  // TODO(egorand): Remove if statement when https://github.com/gradle/gradle/issues/11387 is fixed
  if (required) {
    sign(publishing.publications)
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId "com.squareup.wire"
      artifactId "wire"
      version = "3.7.12"
      artifact jar
      artifact javadocsJar
    }
  }
}

artifactory {
  contextUrl = 'https://repos.balad.ir/artifactory'
  publish {
    repository {
      // The Artifactory repository key to publish to
      repoKey = 'gradle-release-local'
      username = System.getenv('ARTIFACTORY_USERNAME')
      password = System.getenv('ARTIFACTORY_PASSWORD')
      maven = true
    }
    defaults {
      publications('mavenJava')
      publishArtifacts = true
    }
  }
  resolve {
    repository {
      repoKey = 'gradle-release'
      username = System.getenv('ARTIFACTORY_USERNAME')
      password = System.getenv('ARTIFACTORY_PASSWORD')
      maven = true
    }
  }
}

artifactoryPublish.dependsOn('build', 'javadocsJar')
publish.dependsOn(artifactoryPublish)
